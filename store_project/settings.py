"""
Django settings for store_project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
import sys

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

ALLOWED_HOSTS = [
    'gadgetia.ru',
    'www.gadgetia.ru',
    '45.80.70.62',
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
]

# Application definition

INSTALLED_APPS = [
    'jazzmin',  # Что бы админка была краше.
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'store_app'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Для сбора статистики посещения сайта.
    # 'store_project.middleware.analytics_middleware.AnalyticsMiddleware',
    # Кастомный middleware для проверки прав доступа на основе ролей пользователя
    # Автоматически перенаправляет пользователей на нужные страницы и блокирует неавторизованный доступ
    'store_project.middleware.custom_middleware1.RoleMiddleware',
]

ROOT_URLCONF = 'store_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "store_app/templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'store_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Проверка доступности переменных окружения
required_env_vars = ['NAME_DB', 'USER_DB', 'PASSWORD_DB', 'SECRET_KEY']
missing_vars = [var for var in required_env_vars if not os.getenv(var)]

if missing_vars:
    print(f"Ошибка: Отсутствуют следующие переменные окружения: {', '.join(missing_vars)}", file=sys.stderr)
    sys.exit(1)
else:
    print("Все необходимые переменные окружения доступны в settings.py")

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("NAME_DB"),
        'HOST': 'localhost',
        'PORT': '5432',
        'USER': os.getenv('USER_DB'),
        'PASSWORD': os.getenv('PASSWORD_DB'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'
USE_L10N = True

TIME_ZONE = 'Europe/Moscow'  # Устанавливаем московское время
USE_I18N = True              # Включена интернационализация
USE_TZ = False               # Отключаем поддержку часовых поясов (время будет браться из TIME_ZONE)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Для collectstatic - директория для собранных статичных файлов (права: www-data)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'store_app/static'),  # Исходные статичные файлы
]

MEDIA_URL = '/media/'  # URL-префикс для медиа-файлов
MEDIA_ROOT = os.path.join(BASE_DIR, 'store_app/media')  # Путь к папке media

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Указывает Django использовать кастомную модель пользователя вместо стандартной
# Необходимо для расширения функционала пользователей (добавление ролей и связей)
AUTH_USER_MODEL = 'store_app.User'

AUTHENTICATION_BACKENDS = [
    'store_app.auth_backends.RoleBasedAuthBackend',
]

# Настройки CSRF
CSRF_COOKIE_SECURE = False  # Для разработки
CSRF_COOKIE_HTTPONLY = False  # Для AJAX-запросов


# Логирование попыток входа
LOGGING = {
    'version': 1,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.contrib.auth': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

# Тема для админки
JAZZMIN_SETTINGS = {
    "site_title": "Gadgetia Admin",
    "site_header": "Gadgetia",
    "site_brand": "Gadgetia Administration",
    "welcome_sign": "Добро пожаловать в админ-панель Gadgetia",
    "site_logo": "store_app/static/logo.png",
    "theme": "darkly",
}
JAZZMIN_UI_TWEAKS = {
    "theme": "darkly",
    "dark_mode_theme": "darkly",
}

# Для pytest
TEST_RUNNER = 'django.test.runner.DiscoverRunner'
# Настройки для тестов
if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:',
    }
    DEBUG = False