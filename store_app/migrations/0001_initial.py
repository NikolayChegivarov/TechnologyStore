# Generated by Django 5.2.1 on 2025-08-07 11:33

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Допустимы только русские буквы, пробелы и дефисы', regex='^[а-яА-ЯёЁ\\\\s-]+$')], verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator(message='Допустимы только русские буквы, пробелы и дефисы', regex='^[а-яА-ЯёЁ\\\\s-]+$')], verbose_name='Имя')),
                ('middle_name', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Допустимы только русские буквы, пробелы и дефисы', regex='^[а-яА-ЯёЁ\\\\s-]+$')], verbose_name='Отчество')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Номер телефона должен содержать только цифры, пробелы и знак +', regex='^\\+?[0-9\\s-]+$')], verbose_name='Телефон')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Должность')),
                ('is_active', models.BooleanField(default=True, verbose_name='Доступ разрешен')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Продавец',
                'verbose_name_plural': 'Продавцы',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True, validators=[django.core.validators.RegexValidator(message='Логин может содержать русские/латинские буквы, цифры и @/./+/-/_', regex='^[а-яА-ЯёЁa-zA-Z0-9@.+\\-_\\s]+$')])),
                ('first_name', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator(message='Допустимы только русские буквы, пробелы и дефисы', regex='^[а-яА-ЯёЁ\\s-]+$')], verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, validators=[django.core.validators.RegexValidator(message='Допустимы только русские буквы, пробелы и дефисы', regex='^[а-яА-ЯёЁ\\s-]+$')], verbose_name='Фамилия')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('MANAGER', 'Manager'), ('CUSTOMER', 'Customer')], default='CUSTOMER', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('CREATE', 'Создание товара'), ('EDIT', 'Редактирование товара'), ('DELETE', 'Удаление товара'), ('DEACTIVATE', 'Снятие с продажи')], max_length=20, verbose_name='Тип действия')),
                ('product_name', models.CharField(max_length=255, verbose_name='Название товара')),
                ('product_id', models.IntegerField(blank=True, null=True, verbose_name='ID товара')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата и время')),
                ('changed_fields', models.JSONField(blank=True, default=dict, null=True, verbose_name='Изменённые поля (JSON)')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Дополнительная информация')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Менеджер')),
            ],
            options={
                'verbose_name': 'Лог действий',
                'verbose_name_plural': 'Логи действий',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('slug', models.SlugField(help_text='Уникальный идентификатор для URL', max_length=255, unique=True, verbose_name='ЧПУ-ссылка')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['slug'], name='store_app_c_slug_09fbd5_idx')],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='Уникальный идентификатор пользователя (можно использовать латиницу)', max_length=50, unique=True, verbose_name='Логин')),
                ('last_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Допустимы только русские буквы, пробелы и дефисы.', regex='^[а-яА-ЯёЁ\\s-]+$')], verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Допустимы только русские буквы, пробелы и дефисы.', regex='^[а-яА-ЯёЁ\\s-]+$')], verbose_name='Имя')),
                ('middle_name', models.CharField(blank=True, max_length=50, validators=[django.core.validators.RegexValidator(message='Допустимы только русские буквы, пробелы и дефисы.', regex='^[а-яА-ЯёЁ\\s-]+$')], verbose_name='Отчество')),
                ('email', models.EmailField(max_length=50, null=True, verbose_name='Почта')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Номер телефона должен содержать только цифры, пробелы и знак +', regex='^\\+?[0-9\\s-]+$')], verbose_name='Телефон')),
                ('address', models.TextField(blank=True, validators=[django.core.validators.RegexValidator(message='Допустимы русские буквы, цифры, пробелы и знаки .,-', regex='^[а-яА-ЯёЁ0-9\\s.,-]+$')], verbose_name='Адрес')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Покупатель',
                'verbose_name_plural': 'Покупатели',
                'ordering': ['last_name', 'first_name'],
                'indexes': [models.Index(fields=['last_name', 'first_name'], name='store_app_c_last_na_f7f3b0_idx'), models.Index(fields=['phone'], name='store_app_c_phone_ea00ad_idx')],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='customer_profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_account', to='store_app.customer'),
        ),
        migrations.AddField(
            model_name='user',
            name='manager_profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_account', to='store_app.manager'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'PENDING'), ('processing', 'PROCESSING'), ('shipped', 'SHIPPED'), ('delivered', 'DELIVERED'), ('cancelled', 'CANCELLED')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('salesman', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_processed', to='store_app.manager')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='store_app.customer')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('available', models.BooleanField(default=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Изображение товара')),
                ('external_url', models.URLField(blank=True, null=True, verbose_name='Ссылка на товар')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='ЧПУ-ссылка')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='store_app.category')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products_created', to='store_app.manager', verbose_name='Создатель товара')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['name', 'price'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('price_at_order', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='store_app.order')),
                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_items', to='store_app.product')),
            ],
            options={
                'verbose_name': 'Элемент заказа',
                'verbose_name_plural': 'Элементы заказа',
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FavoriteProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_products', to='store_app.customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='store_app.product')),
            ],
            options={
                'verbose_name': 'Избранный товар',
                'verbose_name_plural': 'Избранные товары',
                'ordering': ['-added_at'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='store_app.customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='store_app.product')),
            ],
            options={
                'verbose_name': 'Элемент корзины',
                'verbose_name_plural': 'Элементы корзины',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(db_index=True, max_length=255)),
                ('address', models.TextField(blank=True, validators=[django.core.validators.RegexValidator(message='Допустимы русские буквы, цифры, пробелы и знаки .,-', regex='^[а-яА-ЯёЁ0-9\\s.,-]+$')], verbose_name='Адрес')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Магазин',
                'verbose_name_plural': 'Магазины',
                'ordering': ['city', 'address'],
                'indexes': [models.Index(fields=['city', 'address'], name='store_app_s_city_a0d7db_idx')],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='store_app.store'),
        ),
        migrations.AddField(
            model_name='manager',
            name='store',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managers', to='store_app.store'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', 'status'], name='store_app_o_user_id_9f930b_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='store_app_o_created_504022_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order', 'product'], name='store_app_o_order_i_cba233_idx'),
        ),
        migrations.AddIndex(
            model_name='favoriteproduct',
            index=models.Index(fields=['user', 'product'], name='store_app_f_user_id_0e40a2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='favoriteproduct',
            unique_together={('user', 'product')},
        ),
        migrations.AddIndex(
            model_name='cartitem',
            index=models.Index(fields=['user', 'product'], name='store_app_c_user_id_827314_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name', 'price'], name='store_app_p_name_b2639d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together={('name', 'store')},
        ),
        migrations.AddIndex(
            model_name='manager',
            index=models.Index(fields=['last_name', 'first_name'], name='store_app_m_last_na_5b4776_idx'),
        ),
    ]
